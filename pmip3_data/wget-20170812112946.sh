#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-node.ipsl.upmc.fr - 2017/08/12 11:29:46
# Search URL: https://esgf-node.ipsl.upmc.fr/esg-search/wget/?distrib=false&dataset_id=cmip5.output1.IPSL.IPSL-CM5A-LR.past1000.mon.atmos.cfMon.r1i1p1.v20120804|vesg.ipsl.upmc.fr
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-node.ipsl.upmc.fr/esg-search/wget/?distrib=false&dataset_id=cmip5.output1.IPSL.IPSL-CM5A-LR.past1000.mon.atmos.cfMon.r1i1p1.v20120804|vesg.ipsl.upmc.fr'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/mcu/mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' 'fcae77d95d5121ebf72f90a94dbc0b58e4ac964e44ace51a6b1f1b8e66881d93'
'mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/mcu/mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' '7690265831072de6fcc242a3408f169bedd5a9c1c713d23db8b1dbe4dec57d6f'
'mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/mcu/mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' '19367425f5ec6d6f0a5f5925c1d5b4f114bfbf3d8500f39be3f17154ca15f81d'
'mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/mcu/mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '2035c221ad491796efc29aec095e6249af42f1a2339db6d7ba50e6f586832de9'
'hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hus/hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' 'a53a54df6ae67ac23edf45b7dc0027bd0b662fe32993fcb2e0219cb94098ac12'
'hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hus/hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' '74dc8c6f60935f422ef28976e51e7cabdfe9a838e57d8bf986eb9747609f7d85'
'hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hus/hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' 'e4a5c8c75538df32dbe9f72266cfe91ce488f9cadc4a353c29f5ee9939230b33'
'hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hus/hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' 'af532d28277662d555c1e1c255afbb34300d92f6aec75f5488734e89770a64a7'
'hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hus/hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' '6cbb4917aa1bba95ffe941dcf56d7d11a38c657206dd046ec13467f7035231b2'
'ps_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/ps/ps_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' 'b8ab31d13d2799a969ee1a5db58ddbd8d5c5a1d13684d1076983e18bd3e3815b'
'ps_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/ps/ps_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '3a7294021f2cf55fa6da5c534dd9f61c13b1c6854e407cf761d8d375dd1b6404'
'ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/ta/ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' '264ea98a45b220ae605372ca44cc5573ef314498e77f0854accdcbfd085e8f2f'
'ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/ta/ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' 'ba3414151abb18f2c69228cff912b6521cd8ded3e24fb095dd49d979608dadf0'
'ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/ta/ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' 'ea4581d85f2c65ebc2766f1bf1faaed374b2af73880afab49b23d2f7792378ee'
'ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/ta/ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' '60e920688fdc7e2a895872ceba53cc4ea8f0c6364e05d7b948bb3309c9ab7037'
'ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/ta/ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' '7d237c31ca8250d588076430e98813ef1f67eabd87c9fa94e3879c55c320f3da'
'ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/ta/ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' '235dc45eb85f88c2e59b7e42d73e730252138a7dcd6e6441f33b0b819beaa53b'
'ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/ta/ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' '462e1e911e8caeedf5b3b21a2f59655991a8e87a52d74a7d8024e534bf4226e0'
'ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/ta/ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' '1eae60ad99b3f2bc6e8dfeb6b0871c2c41f7627b530a48c0ec352800283eae30'
'ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/ta/ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' '4cd68eefdb6394d038d11e2d03edbc2255c3f1bebbb8788e0be131c41db72b94'
'mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/mcu/mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' '848d499f022bbea6293e01fc6599250ba42871364da5d9ec7b3635125b8605ac'
'mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/mcu/mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' 'cfd72ef94bb781d0b6facc64902725cac9ca4096dc364bd1ffa93981515353f6'
'mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/mcu/mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' '5b22518f7142b95f0f889f33a8626b8dab778948d614d2cc4bf1fd1c60828cd1'
'mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/mcu/mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' '3f159d5904142ce94d8e4a68d3ad7dc44e13ce606e5ed741da88846a2ca878fb'
'mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/mcu/mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' '868f592b86cb70714a5b4439965ec5763b91f97c1e99e02a595ebf9e0fcb2566'
'mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/mcu/mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' 'f32a996a741407e06a610447d5b2234d3498ac6d299c1962da0e61f09389cb4f'
'mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/mcu/mcu_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' '46fb4e8d4d216d04a07a89e179d2d25d2e04e0737d8d207612b0f51976fc3b7c'
'ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/ta/ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' '2ec11ff5febcc00a17eb750316fdf8c12b7ee3796c8c2f7bcfcdabd279123524'
'ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/ta/ta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' 'e6f699ecafee75664d4186d7fe76d80620482ab03f1ddd59ef6d32e8f62af934'
'clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clc/clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' 'd1739c86a57f0eb6f215f95d593467b395e955d891700a226e53667bc5ea19cd'
'clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clc/clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' '0882e2e6661cebcc713b5572b9658c841ecd50f592794f4d1a1485362f488425'
'clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clc/clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' '0ed39342d93fe84040a322b55775c824b987ac737bf679eab6f3924d3d9a366d'
'clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clc/clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' '179e610bf0fd0125af9b1d6a8ebacfd11e40ea04833fc9d1a8f01410ca6ac55e'
'clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clc/clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '2d2de2bca84104b2422e4788f46ab3fe9c4fdba0277993a3cd8a858af09540c2'
'ps_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/ps/ps_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '7b3e12c7aa4b13e3524de5d654ab454604a7bd07c3b0922ff3850d19e31c2b36'
'ps_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/ps/ps_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '94c1f9c8cca9e320ebc11e65d660e395b3ca5f17b03d2dd6678b8d6e14c16de0'
'ps_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/ps/ps_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '751f23fa641c888b4eb2213f86c0eccc1354f5742ff746376f7291f967e7eb4f'
'ps_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/ps/ps_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' 'c24201a0273999b0e5fd3bb5299ae6a7846440914d32b7cd9dad0fe03c973edd'
'clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clws/clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' '9fb52c163fcdc4e0844a46301c1c07d4436d8021813feab6bb9f1efdf5ed512b'
'hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hur/hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' 'fb272cb9c1c7eeb0be623ef7ee65a682bc88b46d7d4da2e45f3718b118ebe8d2'
'hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hur/hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' '8d5106a66dba1323d7376db89d90dd3dde89d1837ab5edd9bbffef7d492d4eaf'
'hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hur/hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' '762ff7b17fd908521b6476bb7ddade3fbbb0236d08b42c3e4561a4b7445b9081'
'hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hur/hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' '8af7d53008f4e1556bbf850b982271ae5f5129dbc36a6f9e5f560e74a4cb512b'
'hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hur/hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' '0afb00017eff5c22da054cbe17703c6be426f831647abccf65618c462e6681d2'
'hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hur/hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' 'e7d40ac043087ac9f90a5337ac7d103ac2bf7795cf87b49b90e3edf39d1e5580'
'hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hur/hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' '6a875e9b78d834e8deb81d98b3bdd783c9787b7c1d85f8718e4e9fae866780fb'
'hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hur/hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' 'a33e4888b719fa1e61be9459a835248801bf01d3c79e4b8bd42f9faf49d30257'
'clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clws/clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' 'a8864a314315fe5a84b20cfd37715d8b3a4142c55107b91fbe2511c7408054ea'
'clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clws/clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' 'a251dc33d9f1ed9c2460dcaabffdf88ba9dbba5217e658e488b8fabb504ac731'
'clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clws/clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' 'fd009987759963c804d17b39e502aa9442b07cb46f120a2d16bbada12b8b62da'
'clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clws/clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' 'f685355254b0ee053f67deb5e959321185ee98462b6f0842f2f9bc35e1ba364d'
'clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clws/clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' 'cbbd5402899447305be34aecc3112dd0feeb1492269497cadf26e2b8a20aaf0c'
'clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clws/clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' 'e683978b9bda42fe22425183256c36e4dc23bc27ae6b81df9b9c0b130024842f'
'clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clws/clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' 'f0a16752e4f3fc67133a062a59df90c4a8e4a7e2c504b987cf266ee6bb465ce9'
'clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clws/clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' '17e0d4a263098c006a1c36263c43b5f0b9119894ba6adae843e5ea2b31bdf900'
'clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clws/clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' 'c91a7c24ed95ce3a04322b0296c93108b8acf57c27cf9e1f3644d3e3fc516255'
'clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clwc/clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' '7dbe7b0bd2c6e54a1bbcaa804d5ec8924b2e2eff4d4fbf7b5fc9147d42a0e1e0'
'clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clwc/clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' 'e35e65cbb55fe76cf856997627365668491764267153bf0c72fa025770e5c690'
'clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clwc/clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' 'ecfc4ae5b6230aff6145a7effb0420f26318c8a26e55287d4b64571fbccdb9f2'
'clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clwc/clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' '0f901910df26aa4e9b966a620f87d6bbbf9673b597ffaedeabe6933ae1f7680d'
'clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clws/clws_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '6759f637dd0d9a0752458dd529a1b888ba0c2d74de57fdbfbdb7fb799f85feef'
'clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clwc/clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' '69b41f5654c070e85f68f0024a83faa6e0e0c720b11d57d52771081dee12c22c'
'clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clwc/clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' '39fa92fafbe0ac95e411d08083d05e80da97be7404932502193b6bb72f0b7b56'
'clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clwc/clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' '8500f890591b87faa20812996f1a9dac7987ad00517c0724ff84a5e1b84582c5'
'clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clwc/clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' '295d467478878c6f533a665dbf8a0673ed88a0d6d4fedfbec97bfadf0aca20a8'
'hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hus/hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' 'd80dec2ccb370f3b66437b065ca6081554bb4976aa5207f05984c320d0d3eb89'
'hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hus/hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' '1ce8d558f0bd4f821d11b49fc8dbaf58572c8007a368dae18348925cee70eba6'
'hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hus/hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' '154ff61804f7acc22da647fdac48d74f58cf092edc54a161e81aa6c7ac1d1c59'
'hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hus/hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' '66bcc81d4a1f57a03064e642eb5b14a24416bdd7ec716b7532f3f1821ed84ba6'
'hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hur/hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' '74bca4e71767abe91783e91438b103fcf3c157caa04c10f20dbb527506715569'
'hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hur/hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' '600a1a7c0159c5ba087404e025ee60b823a6aae28b8a34787ec20b7f68088fea'
'hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hur/hur_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' 'dfb7bac13a6ec11ae7858b1d1f6521bc2c75114246cb3002bf78916cb986cb62'
'hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hus/hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '6f4e70e3808bc99684a8421b0254968101b8475711a4d734965af0209666342f'
'hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/hus/hus_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' 'b9dd93cf840377e5877a481340b38466388534827e6720c8994f771c8acfccdf'
'clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clwc/clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' 'd9178934739e24e09eac0a8f83d0f15bb45a31fc2321538f96436ae7bc58a71f'
'clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clwc/clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' '44a89a4d920375d6b6ef54f29cff7d6778149a7464a9468e836f30374364e893'
'clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clwc/clwc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '2c5fcea550e8414a8c2d0ad5aaf545c90a39878820169785259bed870ce4af6a'
'clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clc/clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' 'f4a7a0d5a264518aac27d26ab75ab6f2ed343a31ac671e6477a1372ed1e5bdc8'
'clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clc/clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' '3897edcbff80dda1b54eda1dda20a376858a32f18133ba3c24be23bfd977198b'
'clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clc/clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' 'dfdec9fb57dfd5045009cc9d418fa6fa4930f4713cbac8a15d880cf28ebf7545'
'clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clc/clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' 'c34686335b11655036167097cf99c68cbea27b6f8a75e47a737117803a689dda'
'clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clc/clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' 'ba035fc1eb0e8b1946234414e2d28b279c37ba0c83c5ab151244a9a66edad057'
'clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/clc/clc_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' '47ca0bebd4a32f7e091e6296a3bf83f7923a21be9fce6f84797bdff972744849'
'tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusa/tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' 'c24016ad2d581710c010ada5a28487b40be9c332570948b01ce895c165ae84e0'
'tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusa/tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' '61a0932b715eee98995215b78d11be9e7fdf973153653f94f7ae974e85449eba'
'tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusmp/tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' '4621a6788a143c27f07b8cff615e54edaa4490932b6ec891feffca38d073e92a'
'tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntmp/tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' 'd3aacd1ec94517745c8b890de455c4b14c75060dea539f7e478dbc7de0cea0b7'
'tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntmp/tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' 'ee52bac4f631aa2225c42a9930cbf5c0e696ba94419ec02e4afe6e447af415eb'
'tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntmp/tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' 'a885bb58bf1aff9692afde55bb6828b373df30d8bdb0b94ba25708f77892e412'
'tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntmp/tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' 'ebd39f737c64b0d310867f86e9be340bae66d4570730258d9a6ba0ba8e7f7e8e'
'tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntmp/tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' 'b77bb976a005cd7731f5f38e2195e6b7ad55eb71a01af797ecf1e332d7145693'
'tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntmp/tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' '05221d2fee618408183264ac14d435bcb7f1e20b626e36a7180b9095db1a83d6'
'tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntmp/tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' '8b394ffb599982a2bcccb6d3942ead81c61222bb3e22a9a70cdbc1693de17e9e'
'tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntmp/tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' '8bad896896f862a99597e638405509aa40553c19990c4125e38dd48653e2b08a'
'tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntmp/tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' 'f11246081e53da763c11ab9c1d149643424c480ca0fab74538b4a7e8258f9519'
'tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusmp/tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' '07ef3d553dda6091aca747879fea2dab9a951fe7abb3dbce1bef19d90af48e11'
'tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusmp/tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' 'b1eaa9aeb5699cb86ac46db82c74c44b42a0114dbf294851d167768e442e8a2f'
'tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusmp/tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' '4813a9386f06b44804af77f77bed4b4344d7f1c205c80d4b49103a3917dfa21e'
'tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusmp/tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' 'b1c9e5dab72cbee9932fdc153af60293d9a380fd334e8105f13f45e4db3486e2'
'tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusmp/tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' '52e9f3081f3529c0693cb59dfbc70ddbd945afdd23047499e625b8b06401cdbc'
'tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusmp/tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' '8f70fba2b4e60fa2f7ba8bcedfa3e8d82529536025d900520e2545f6b3e47f1e'
'tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusmp/tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' 'f7856015162e1b16b878c221a54a2e22f82fdbeaa6a6e6d16c0f7a1253e11b3b'
'tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnta/tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' '80831a62f616ab5d05639192da900a09d610fca7d6e8341e1f3fcb92f90e2dac'
'tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnta/tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' '25e3f34e7c43c6c208d6c41811314b92b26524b8141568e45232332bf6e30115'
'tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnta/tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '1acca8ee386e8b0b9e3c01df187d9cd7b5ab2627cb7fd696db6090362bd31fe5'
'tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusa/tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' '1c95bfcfcee1cc74b8b3b73d31a3803ad71a67ba7c2655ac6c459aa35a44a50c'
'tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusd/tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' '572417647ebfb9ba8261897a2de990cea6700d261f1432d96b23a46dd42f47b3'
'tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusd/tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' '0b6998872c3baf4ea597de7fa8e73e3f718b61bda702e4ee471db25ddc6da66c'
'tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusd/tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' '5f0996da0da5dcf581042495f9bdd4ce4fe71c65805eb69471841e5f6e93509a'
'tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusd/tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' '4d56bfde77cde35e7af57bf864bbda4b6d34ae546f58b9ac30d206c804fd4150'
'tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusd/tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' 'b1b8043d8f9cd8850a7570fb0b70618d87bb54fd9f201eb3ede7a2c892984234'
'tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusd/tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' 'aac5994f6551b4bc135a70dec327cb807fe26052784c8e07798a860116501385'
'tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusd/tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' '0cab94cb0e58b5d7ae8b5eac2685b9829192392e5e8531af1a974a51e784eb50'
'tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusd/tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' '88ee7295c6e64912228ff3d2048496cee5df4e7eb1a99f284d16aa13410d8a56'
'tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusd/tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' 'f2c5c3f5d432008d3423806369979b0795c33140cf615fcafa12844a7503e8b4'
'tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntscpbl/tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' '0252ce0442d8fb82705567256ef3743bfe95616006333c84e6d15716c2e6b4ff'
'tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntscpbl/tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' 'bcc6923632645b8e708377eabe90508e72643c87b85368e4d1f206cd20b4d5c2'
'tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntscpbl/tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' '62ff7bb3160a7fea34a24b16ee66b4617056ff50fa315ae6760603506fb17286'
'tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntscpbl/tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' '58719466185a81413448dbe42824e471747c664bd1b133507172a5a03d2e7de4'
'tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusd/tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' 'df7c41f65c2e2d9c0c12d0d9dcc87170bacd2c03c4e86e1c67595ba12ab32d4e'
'tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusa/tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' '03e7dbb43e76f68c3f027bb5ab3502e8ee4b454297f21aef7b5c1bc45583617e'
'tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusa/tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' '17d45937bb7378bc69d0a84515d07fa3e19a602b9018e56cf9116b3cf6e2c4b6'
'tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusa/tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' '68aa3ad4760536426759f1b52fa5bf02a9bfaa9659632197e5fc337245430ad4'
'tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusa/tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' 'e09c697261b4b206f13285ae3a8bb41aa1d3184d56f75c09fa18593448a1316f'
'tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusa/tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' 'c38d3da769a831858665c13a9132e713befac13b794399872cc218806b428b59'
'tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusa/tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' '9689e5793daab5a80a5a1e201fe3721b7914e3549c62774a622fce2193c5da33'
'tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusa/tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '72dc5e51f1f65f217a25290e714d441de95a2fbf30272c22ee2e18c521ea20a0'
'tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusd/tnhusd_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '524870c23fd51ef77c371a2f38dfad0567bfb1ec48831744fa93de15b2e151d8'
'tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusa/tnhusa_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' 'dc5fa02c9e2431a62b09ed7267c2c38401adc7942a6942b1db3abc12288d721d'
'tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntscpbl/tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' 'a8e293ad9ebcaca9a9f771c4f136768f71ad178e81933fcc156a80dd01fa1517'
'tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntscpbl/tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' '33039909a06b299dc86485477cb5f588a08a5a8ecf285662a67d97d08bb4fbe1'
'tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntscpbl/tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' '68905ee30ddfa4a47c65d0afda2e926944c1e6c11e9cc570be6153ef86abbe1d'
'tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntscpbl/tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' '347834fabcea1f731868a2cb9ae5334f3e2516d732e7913077fcdd9fa0a82198'
'tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntscpbl/tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' 'fad1b5e88b37cc36951c6a70a71d5f2334162e2f9c1a9a474df100c7f2de8527'
'tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntscpbl/tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' '1b095f48343037619e93048beb37788a1a46b1fcde732c36a0f5f8f5f1621158'
'tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntscpbl/tntscpbl_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' 'd3c39254588037ee8e278da921da5ce16462843878822866e223de78719e5980'
'tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusmp/tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' 'b38f41591cbffa7be795b47be553d3cfc03774da9ec946955e8fba4383e3bb14'
'tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusmp/tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' '1e59fe346e133a17674e52311f1e7e1ff61c825b75972fc19a62aaee4c221a7b'
'tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntmp/tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' '7c048a14205cbc5e7fb365735e5fcb57a24a7210849e4a4c115c143819142570'
'tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnhusmp/tnhusmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' '902d438e2a3a04b9400e808c76f0d1acb64324e428f7573b7799032a83627c06'
'tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tntmp/tntmp_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '7e361d7abf0339e3ee6194eb11474eb73f29a8d3c355869ae5b744c437d34998'
'tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnta/tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' '88cc6dc7a232ccff232e710eb1d2759ed843304a7af6da792caba219cb36f426'
'tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnta/tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' 'aa807cb29536cab7fce353961cc6dd121ce464fb6a7cc044fe7ad2e0b4e40b88'
'tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnta/tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' 'b4a54ece088b7f7bfe83d2d65829a52c17251c0b1ac70d9e2f1ca2b1af370942'
'tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnta/tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' '28bd098248708aa7753d93738bafa56ed4b5a6b7e204cfcc43a868773a3d76f3'
'tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnta/tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' '5f71a61da3550274831c45a7508d8bf900f6236b09f2494cd864c6771e552be4'
'tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnta/tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' 'c54984df8fb1c290e21f24920594c20dd6a6f80ea94666b5a6c4aecd6f77e355'
'tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnta/tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' '8cc50b2169e654d33f2b617617d43d81092bac59f4a3c86cae0af57705f13ed7'
'tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/cfMon/r1i1p1/v20120804/tnta/tnta_cfMon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' '1c390fb8e4ddafa47698a7c824460cf5ccc6e92cfcce006cd846e8a9d361cb64'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java is required for retrieving the certificate and couldn't be found."
        exit 1
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if ((mVer<5)); then
        echo "Java version 1.5+ is required for retrieving the certificate." >&2
        echo "Current version seems older: $(java -version | head -n1) " >&2  
        exit 1
    fi
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    check_java
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    
    #get password
    [[ ! "$pass" ]] && read -sp "MyProxy Password? " pass


    local args=
    [[ "$openId" ]] && args=$args" --oid $openId"
    [[ "$pass" ]] && args=$args" -P $pass"
    [[ "$username" ]] && args=$args" -l $username"
    
    echo -n $'\nRetrieving Credentials...' >&2
    if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
        echo "Certificate could not be retrieved"
        exit 1
    fi
    echo "done!" >&2
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 149 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
