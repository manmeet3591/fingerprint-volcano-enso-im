#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-node.ipsl.upmc.fr - 2018/03/05 12:27:38
# Search URL: https://esgf-node.ipsl.upmc.fr/esg-search/wget/?distrib=false&dataset_id=cmip5.output1.IPSL.IPSL-CM5A-LR.past1000.mon.atmos.Amon.r1i1p1.v20120804|vesg.ipsl.upmc.fr
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-node.ipsl.upmc.fr/esg-search/wget/?distrib=false&dataset_id=cmip5.output1.IPSL.IPSL-CM5A-LR.past1000.mon.atmos.Amon.r1i1p1.v20120804|vesg.ipsl.upmc.fr'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'ccb_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ccb/ccb_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' 'fbf5ece7f7e084af4c23d2dec605a461d483367d2513e8cae17e6a4f8820dd72'
'ccb_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ccb/ccb_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '6b2f533e6cff9995de8bd3e6c129addafca377f1d7e82bb85a355f5cfb1f27ec'
'ccb_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ccb/ccb_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '88b5521b02f1980cc9eb9ea64e6b15ec1f8517fc74ba5672391704361b3c3068'
'ccb_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ccb/ccb_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' '154c79e0081ddfd847f6e890d5a37d27416374ec8a919f9e817d91e8079c28ae'
'ccb_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ccb/ccb_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '93e7aa6064cbc3eb6d9195697886d3f1baf98c6a5ce7b46c7daaa9c52787ef8a'
'ccb_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ccb/ccb_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '32881c45ae650ae3da0d1ed27f50d982d2e580f2b4e5aaa9cbec1eebe8199f6a'
'cct_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cct/cct_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '545fd4158b810a3ed9e287c7a0c69b0ed163a6e3786181dbdea54b798131a828'
'cct_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cct/cct_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' 'c892e5ccb7d0f00398658e96ee2cbb1a27a41841caac39de4232d96ad3c0db35'
'cct_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cct/cct_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '34720b5a80aa975d6c1ac54107aa8c764df7b4f99399034abcef8c1f176815b0'
'cct_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cct/cct_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' 'f5e31f6847e5ad94431bcb6ff25c537a21be0b22f8e1e58aee1767919fd5afc4'
'cct_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cct/cct_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '56415b2365a437eb4299d03e162a3bc80c430038902081146a4ee9019f8b66ff'
'cct_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cct/cct_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '884e01836a26cb408c1a863f9e0800824c2c40c899f2bcabaec57d52a27cc6c0'
'ci_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ci/ci_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '57e40c5f4b19223f9905d14ad503f70a687ce0652564ce751abed0c3ee927073'
'ci_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ci/ci_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '164cbc68eef718046bfe8709776d6e38422ac8da8577e51931376be3732735d1'
'ci_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ci/ci_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '02b97c5f9970a834e3216d1725b78ab8510fb86c0db778c0d433c3006ceb50ff'
'ci_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ci/ci_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' '99b9f13d13e1e2eaae5a03a705da50b0cd49d1c1713335ade071fa4bc01bccfa'
'ci_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ci/ci_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '782faa23e28302df9e78ef0b1fcc456e39bb9f32afa215ea36b683042f2be601'
'ci_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ci/ci_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '9477563ccca7818fd88de5518136838d8b9d4534f5ec0fa99495c76b80b3502c'
'cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cl/cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' 'd5d773f603a0124c23a872b674c8d65a0ca85dd6e14695cc9fa1e1c97a63738e'
'cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cl/cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' '54e25502a5f16d71d8a3afb08b44c5d0f5551becaaa9fb351e00d62e224162d8'
'cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cl/cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' '24824d320233930f5004546b53ee02c8affed99e95f691c631265d23fa02fe2d'
'cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cl/cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' 'd59208ce548ea93371bcb23f6b96aeebe4ddea8fec9543c5753a7f63e5d4c2ab'
'cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cl/cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' 'cda6fa61a4150b84847f3958e3ac0c6ee4256279cf2f9f7b8b4dcbfdb749635f'
'cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cl/cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' '9483148237f89314d316d14bc97b45e222f531746e9eca8113cd5899966dbdc0'
'cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cl/cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' 'fd266c4107b3018b2116e4bce5c4f9a5841c33db131c3394d7b8916cbb94e5b1'
'cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cl/cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' 'a574920cf16f6859cf24728562a349f705203380bf52b9c45356faa803e8d115'
'cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cl/cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' '6037a4b334d9f729451941bc732003e5429ab7d4348946ad07816516fb836f8c'
'cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cl/cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' 'e753c6da5e9f76f6e232489fdf96c14a6739ed9a22cd0ec70074ed3d8d9b8a86'
'cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cl/cl_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '6465209576c026eb97f13c07b3e11e7de9c194b88949818799f9a7ae89bb8c2a'
'cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cli/cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' 'a2f6b1167c46f5888e18e3b0e1d7c129c11affb0e8a0d99aff6e4b106931c7b9'
'cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cli/cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' '2c8cf3d739d016ee3505a6451523ddbfd5c67afcb7880bbedf908f9f50e84bdb'
'cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cli/cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' '6424eb4d9bab4c14fc103d1b3821314d5e31363522f58f877cf738a4ce335c9a'
'cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cli/cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' 'd2ef44f0ea8237c4595d89c409fdb11f9e028e26e0123b0150d5155c193cfe95'
'cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cli/cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' '25e89be5e05f045fdecd461e8d79c4f93100fd224744f9cccd3cb09f2c94b11f'
'cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cli/cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' 'fef7097d356ead43076e6294c68c69f7fed5f6b0e02ac3c882048f464f65372a'
'cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cli/cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' '7b09688cc12c1f077891beed31c7f55a13f6e60b6d40875dc724a19bb30105f5'
'cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cli/cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' '30ddb14f02c597e5e22732ddf9267638df13313a7bd2dc6e8158d089e3d1f30c'
'cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cli/cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' 'b16054f861da4b630462cf97974a610aebeefef0f8f918a5acdaca2c016b7a61'
'cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cli/cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' 'c37cb9498053eeda4b79065eeb54ddf49afcedf3d78d801f12b19003abd2aa2f'
'cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/cli/cli_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' 'eddd8ca144ea6f28e667bded23520399a42aaed92af10c3215e7d06abfa34e48'
'clivi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clivi/clivi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' 'c409b3fcf6b615c9ec6f1c0475890b41b1b42a726f34d34518bb972a099b7d06'
'clivi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clivi/clivi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '38fa8d810360f62701351adc2ac068120f0a6cdc894e1d85a258bb2156fd57fa'
'clivi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clivi/clivi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '2947f84b17136e5b8358306c41f21a069f65f0631df9948c444af9270df00578'
'clivi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clivi/clivi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' '8f6b7fd47e382014f5884726057db2feb1b1b832990ac0123939099253b53284'
'clivi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clivi/clivi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '487e76abaaf090b13fcddd767760a7f826afbb647fbf6df8efeb06f2291dc49a'
'clivi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clivi/clivi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '2005cb49516c0ae7a7d5f22583b999798196d379448af17d1ba5ac9fb3a2bf62'
'clt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clt/clt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '75bc576bb3be6839c7928b0eca3b9bbcca0cf44085c6ff84eb4b918d7e386a60'
'clt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clt/clt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '717753cfb73de03c998ca30f5bfd134fe3c63acad5d08c4c66d9d7c05029b1eb'
'clt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clt/clt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '57ebb4babab5a2c4a3337258498d39bac4ccca85f10282c35cafa88bd1d1866d'
'clt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clt/clt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' '018958b591754d165e781aeb46d5f15e81d8a16e74b73b0f65a37ce3b1045976'
'clt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clt/clt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '896dd84fb3a63fd56784b4405d8f6a62eda2eca9e332388fc2a607add4001312'
'clt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clt/clt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '3bf4027fc695ef91018f299a872859b6be02e6856ed325975ba5f86e2d3c0218'
'clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clw/clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' 'f9b384a74ba0f378a04503ceb391ee9395635ebe429d1d8849fc4b8afeecf62c'
'clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clw/clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' '8c87038ca2a70c8af6acf837117d08187841343b2f0f4bc5b2aa5db53b9bad8a'
'clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clw/clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' '840b1535689383b6a8d3b6da18e32358477e7cea580239dd6759bad7d4d5d361'
'clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clw/clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' 'c665dd2651160cf1599b436a35d5f83fbe38dcbb92f3f72bf4f1a3eb52d10709'
'clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clw/clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' '9f230c50dbdc72c6ba98f058eb75af3f346cd1b2be32a48bb2ba01247e035cf6'
'clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clw/clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' '82c868481d7baf0d5160e4811b123c52607965b37e4d43265aa6a6995f48c409'
'clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clw/clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' '6dc376f7d3bbadd5160a9ea01fb9b440761724ee02282da1a39aaed427e7e9f3'
'clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clw/clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' 'fec9d792209be90f7b51b269368c83e9dd485afdae35f09eb96a731edf372a07'
'clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clw/clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' '2823cb27919c42f0e0b363434b97105f95f46c01661bc7b8d46ccb1e158fced9'
'clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clw/clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' '2eb143baa3ad42ad09e7b09dc3ca0c209982e8d18fb8e5ce0731baec85f45a3d'
'clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clw/clw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '3d9e1de3cbdc75764fc4c1dfa455aeb92d5fd22b71fcccec1e7b90fa26cbe36f'
'clwvi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clwvi/clwvi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '386743251ac925f711bbf659ec00c07a8c0b8b6b69435e574991d43c5acee24f'
'clwvi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clwvi/clwvi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '2f338362d7c23a719160771168c3ed3f565b809398aa8ed41cacefda09d6ac1b'
'clwvi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clwvi/clwvi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '074c4a55b47fb90b34bf1b41f536e48b76d12dcd7d83648f74b018de4eb44a02'
'clwvi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clwvi/clwvi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' '0623785097d6ae734708744bc4259962f901588d30a054838dec8728fff95075'
'clwvi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clwvi/clwvi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '6f879dde2349cbb897c1625ab0b92a7d4904da67bdd7393b0bfd1511403bac80'
'clwvi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/clwvi/clwvi_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '7343a74321f05b7a82d7095c5928d70e4b95b5cd5e37a7be5334dc3e0c4708b1'
'hfls_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hfls/hfls_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' 'a91453c3080661f01f1262b9d7d3aa2bc67bc9c3f0853282c9e4268b3c0ad9de'
'hfls_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hfls/hfls_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' 'af37b3bc4313e821923492000a1056e7750034f98afee3ebbb7b20b959a7f10d'
'hfls_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hfls/hfls_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '8a86a174df3dae2abd089b3c9f6631413fa1fb6c09f2372e9731dcf1fb522cd4'
'hfls_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hfls/hfls_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' 'aea73425c012fe5f199f63183089155d0fd7701656b44d9d2126e8b39f236af8'
'hfls_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hfls/hfls_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' 'ca70d881919d4521eed3d7ffd1581b59b7a7a3c07c455228ff3224b0dc14cb4d'
'hfls_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hfls/hfls_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' 'c243f546372e5a082cc0a9513f56e8f8df7b5c6f5e88424ae893287ee293632f'
'hfss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hfss/hfss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '171a7878063082cebbc98eddbc1b29137ba3d181491449d31693e363e99d5bc7'
'hfss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hfss/hfss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '6c1fe4a71fc6263b182e0bb6780a94c7bb335918e21e7117963b32f220e36ea0'
'hfss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hfss/hfss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '036491a9615beac11ac63f814902c10a6630c3da84b9277cc0424e19dc905736'
'hfss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hfss/hfss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' '89c0cc5404da139c86d75767d48710f78369f0648676e36e9c234057cdf18d82'
'hfss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hfss/hfss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '8d5e05004d111cf2974b706ce1ddd53dad6fbb48b8c1dc01b171bf732d197e9c'
'hfss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hfss/hfss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '3fd2f0c1717a583ec9e5722fa29533954bfe5a16ff70638ec2d257df2290b3f6'
'hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hur/hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' '7317e3d3f18979a780b00f9f2618057a6be54e1566214fdfe0c77b11406d5a12'
'hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hur/hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' '8549730b692938ca652c28c399dded5cbf9923230b62484764a36c03e6f17f54'
'hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hur/hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' 'ce809787e5b7f7250be83216f7639dc1f133381e561d9b4759c1f7dca1c45857'
'hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hur/hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' '462c62b7a6cf7aef4525a1f854181f9c1a73e7045751ef299ee35aeb6758f164'
'hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hur/hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' '88d63a5e410237657a5adfb5ea42b52fdf80e4df010c469fb7c6d24b64122ba2'
'hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hur/hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' '2b411cf72e4671a9c9bf4e0aacb1c6bc176aa5f0b01eab4bae6b8ed07dc7566b'
'hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hur/hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' '0459c7f87b5ae80c18049c84a96a5e19dc30d68941bfc91e1bcf6ea54364ab1c'
'hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hur/hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' '82e306a7eccec40c5525c804d20ab610fdf32c797b28355a339b160c4c61ed25'
'hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hur/hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' 'ecc6cecdff82d2e5434c1f72cb4908d02bdfd3d14650abac41e739eb527d66a7'
'hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hur/hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' '38ef7bb9c23e2d205df4c5d27398a5886aee370e6f86647ce76bac18ac2f5fd1'
'hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hur/hur_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '007e3fb64b0955fe545b98fb32a91107f50a9932ac5a6f997f9dc89d5207b7bb'
'hurs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hurs/hurs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' 'a489112777098a113a08f724baf10336d52f4668c7f1952cb973723f52539cca'
'hurs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hurs/hurs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '837287d38d2382139d34dde3406b6e02747c69f8d09aed84b8350a4bfa05ddba'
'hurs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hurs/hurs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '9acc751d1153c15e533e02a6c165fbf2830e6ed310c807aff047d7c4d33fa459'
'hurs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hurs/hurs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' '27cc6e513817fe36be418631e41aebf21d0fcf96ac1cdaaeb15bc6971a7b40de'
'hurs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hurs/hurs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '456df351964b249072be1a7c4c5a952f697e3be8670ec2d5fdcc80b3baadd367'
'hurs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hurs/hurs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '31eec5a614acae96d2e2cdf6086c88d1ae2ef3deede865b1014e3e627e63a872'
'hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hus/hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' '41328b0ac59a92627ae9867517e3cbc7de8395321fbe28b4d214c971250dfa7b'
'hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hus/hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' 'e1c46a59dccc86db40b3c6652af79458f853052c436cdc80f5b836a4c00978e1'
'hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hus/hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' '1052eb4111c052c1668bb7391c25dba971abf86ed5491eb02a96a2b0020b3d5f'
'hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hus/hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' '87c38f61dfb1785d4aa3c3010442d9fbf047d14bf547079e11456de540920df8'
'hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hus/hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' '9f2c43b39de037ed8a4197b0c0ac56a084c13b9f40da042ac3732c0c88422670'
'hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hus/hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' 'fbeab0abef12eefa30585eda8a119e44ce075addc8560327e8617a18cda524e8'
'hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hus/hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' '5132b993d3e29cd57ec044cc40a7532b17090ccd8a6f1c12ec5ef1daa28aa92d'
'hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hus/hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' 'b4085dc974da19217ece4d4950e9bf53a3154afc70573079e55343c168308093'
'hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hus/hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' '444725e7d14cef621f2691564ad5d4c6d64aaeecfaaf95748abc65aa61f949c6'
'hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hus/hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' 'e73e4ff79955c9d8d235fe7ad6f517f45baed84f2a406ed249183e331fc646cb'
'hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/hus/hus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '941453437ee8b0caa3bc7b1c770dcc6ba19233eecea10638aeb5dd4528faacaa'
'huss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/huss/huss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '07e46e4d181697ce9b8b41c9bf9e586b50f6de5dee1bdd4ae95bf5b50cb89558'
'huss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/huss/huss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '87a5f6d19b049370928c8cdbcb5798aa40e069a09edb81cd1e3aca05d44f2e02'
'huss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/huss/huss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '7bf5c921904684e982e3b6a7e7612395d6c62884deeaf8f89122dfb7aeec7440'
'huss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/huss/huss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' '06e2d96206be88abd4ef7879a1445f568ed938dbf74a3e3b3c52d3fd51ff0f65'
'huss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/huss/huss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' 'bf8f7caed163bc0ec80ba6bcc8ca637571f2cb7a8c12b38cc1ea755570d233de'
'huss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/huss/huss_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '84f103f5872ce22dad3c0100a4958d865f8bc6705e71a4004438b2e2a224a1e8'
'mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/mc/mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' '15aabda20fa29d677426b528a4b8a307eb55e65566a47ee4fb9d4e0179d9ea4a'
'mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/mc/mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' '49caf54522e4516750d464718ef2ee2cda31cfd4e99aa1fb3344c21fb60d8ee9'
'mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/mc/mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' '5342696af0bdf4cdc5545832242942dcf7c525008f0c9623d67e11815e7c4ed9'
'mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/mc/mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' 'f623736a5c3a30623cf43d97613f0d020fe06e1d104d9d3be535c34eed145c09'
'mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/mc/mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' '2bf627c339a477d72c3db02db027e29ecf13246921758c02c30d7f1a1f10b459'
'mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/mc/mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' 'c58f74dc91bfa3b0ebf3a449083b30570ddcb25ebe6b79c773b64b056498fb7a'
'mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/mc/mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' '543bb208e9a766fc1b2c480b53655d90b10b7db7372d0a6a7b1a57413b7d3cd6'
'mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/mc/mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' 'f330d2599cdbfc89be2568b0ae0a85f43280f5e8b72928538e108a02624d2023'
'mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/mc/mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' 'd3724f4adb400990461bb8bd364d1f2112c550c2dd2eedb50e6f89cad5fb21ef'
'mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/mc/mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' 'ad44bc45060db39ec318d4ae5422988a0bbd17538211357c5fd493b8d8ae2c54'
'mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/mc/mc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '13537e85cf96ea8bf6019a4845c0307ef86103a7a5aaa605c719eec60734bc86'
'prc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/prc/prc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' 'f2420e9d628ed9df80290b5cf59c83c1389e68a8161f2b5e71e56a864eb3d2fd'
'prc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/prc/prc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '14ec868eb7900f19877a490604daca576decbceb7f07f111b4d670cc5a71f27f'
'prc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/prc/prc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '0305107fad41a87312ae600bbe3d16e36b782bc5efb41873eb7b8e67fd11e5ba'
'prc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/prc/prc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' '2f9966aff6be39cabb91a5dd38fb9ffdb773a9f86abd7ba6c9df3e469d4b94a9'
'prc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/prc/prc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '1e240c3547750308dab58d9afa63ef251861e7120f5687222ab71c9dfe51ec52'
'prc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/prc/prc_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' 'db47f346ae27a2a20767254bacd1da46bdd28efd096572a44d6c3cdb533e3da8'
'prsn_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/prsn/prsn_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '01a657caead77c30365e4c99f38383c1a5a52d08bd5314f684fef2a0dca46a59'
'prsn_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/prsn/prsn_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '8b790356a85087c8f177d3f1e90eed24ee159eceeee66d17223678ba2a0696dc'
'prsn_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/prsn/prsn_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '5c35c0727147d0ec6b32ee0b149496432471b37dec4cfa91afdbb7421100d568'
'prsn_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/prsn/prsn_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' '1b5fd5e2a4c3b5761dd2e3405c34dec3d4f32fc688cda389c761d44b06a07917'
'prsn_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/prsn/prsn_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' 'eaa2a9387af982acffa80a7f90001f1a46fb571d070d4f5fafa7da2d54e5a74c'
'prsn_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/prsn/prsn_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '94126633cd3a6cc5c3d71f157448a7ea532558d362675df96c86008086ffc3af'
'prw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/prw/prw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '0dbdde14b474b51ee4eb0c07537264a6ab02abed1726fdb83368d3b7cc2cfb97'
'prw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/prw/prw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '50b5897dd53f5d10e3d4d3af859dde277de9a3fa3f9dc13a10c10996e90963b2'
'prw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/prw/prw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '04c58410908fb388950a6a2d4d37e277a35d643d8292c86be5693de389fa3346'
'prw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/prw/prw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' 'a966bc7a5af986577aa0804adb0983bacb7f485038ae367ea3042490eb0fd868'
'prw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/prw/prw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' 'd0c5aa994941183e61c2b9017fd4c97cbfd836d60ef3d01b7a050bb921ed2e26'
'prw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/prw/prw_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '063bda85aab47ff02d59db15798f4faaae171cce48640a1cbedaf00ce13d626a'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java is required for retrieving the certificate and couldn't be found."
        exit 1
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if ((mVer<5)); then
        echo "Java version 1.5+ is required for retrieving the certificate." >&2
        echo "Current version seems older: $(java -version | head -n1) " >&2  
        exit 1
    fi
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    check_java
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    
    #get password
    [[ ! "$pass" ]] && read -sp "MyProxy Password? " pass


    local args=
    [[ "$openId" ]] && args=$args" --oid $openId"
    [[ "$pass" ]] && args=$args" -P $pass"
    [[ "$username" ]] && args=$args" -l $username"
    
    echo -n $'\nRetrieving Credentials...' >&2
    if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
        echo "Certificate could not be retrieved"
        exit 1
    fi
    echo "done!" >&2
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 366 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
