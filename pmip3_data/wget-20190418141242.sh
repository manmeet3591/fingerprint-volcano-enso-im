#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-node.ipsl.upmc.fr - 2019/04/18 14:12:42
# Search URL: https://esgf-node.ipsl.upmc.fr/esg-search/wget/?distrib=false&dataset_id=cmip5.output1.IPSL.IPSL-CM5A-LR.past1000.mon.atmos.Amon.r1i1p1.v20120804|vesg.ipsl.upmc.fr
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-node.ipsl.upmc.fr/esg-search/wget/?distrib=false&dataset_id=cmip5.output1.IPSL.IPSL-CM5A-LR.past1000.mon.atmos.Amon.r1i1p1.v20120804|vesg.ipsl.upmc.fr'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'rlus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rlus/rlus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' 'ca0a159522c70151ad5d14e5f260ae9981188c4d19b5568891b6ec11ca1adced'
'rlus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rlus/rlus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' 'bb79d56d5d35ccee600250813c8dc30a4e8b50aa90084d1feecd548ff0a1dc51'
'rlus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rlus/rlus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' 'abd661a56fca3b21efc191328ec2a831c668a0af56ed95a03d7e9f15d12c11d3'
'rlus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rlus/rlus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '16eaa15dd4322acbb6e0972062056667ea061bea0f4fb2dd2b3a63e8bdf06505'
'rlut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rlut/rlut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' 'aee06d422d83a7c59f7d0247138e48a2f089aaae404d1888a6ce7d9c38b181ac'
'rlut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rlut/rlut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '37d4b3a22f40f719fe711296b4949b29d9b6f6198f20adb0d95c9e806d60b5e6'
'rlut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rlut/rlut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' 'f9dbc455646c179eb1bb12a6f460ca04253b84b708dc211e06286a88662bd2dd'
'rlut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rlut/rlut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' 'd6cf0b79af8eecd4488e3811187cccd97cd2f8feba85077c26d5f0e1500e9f86'
'rlut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rlut/rlut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' 'fb24a5a25f9a4e2033f439f1c5b4875fbe52f24132a086ad2323e705325cec51'
'rlut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rlut/rlut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '386d05de4ddb689ba7dda34e9b805110fdbdad6d14d0928852cc366e75ee15bd'
'rlutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rlutcs/rlutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '78a505048eac4015a775296fc092474c224309c62a46bac2b149e9e5b94cf50a'
'rlutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rlutcs/rlutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '5c2f7986cc7be84e1d8581c003c067d705f58ac9d4106d47923a15c36b2fce3a'
'rlutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rlutcs/rlutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '7a7dad445bcc1bd97670bb28f386efdf03c97552860c6e25133b308b14725a30'
'rlutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rlutcs/rlutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' 'b1673363399e74fc88377dfc730dce7e6067b58c0bc46d287f2e56688a99b15d'
'rlutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rlutcs/rlutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '6faa31b4e702395c12668cf6a1776bca98055d3fa5346e6ce8a9a0c53653b5d4'
'rlutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rlutcs/rlutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '0565779ecd213c5facd8d8b794618dd6915d7692fd5c69f22111fcc93454af25'
'rsds_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsds/rsds_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '932e230939aa555129ae5c97ef3f88410413a009de01785a9b00b27229db4217'
'rsds_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsds/rsds_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '40ba1e44c1e0a7872a1a5d282af62f79a4fa2c3e465dd9492ab2a27e1c0bf386'
'rsds_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsds/rsds_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '3dffa2687ffc0849fbf0b0893fc97f788aeedd912dbe0ebcf067cb4f301fee13'
'rsds_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsds/rsds_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' '29ac2a5fa8baa5fb6a792a3e85e6e2a52569a623d66aa47cad0d5d204ae0f810'
'rsds_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsds/rsds_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' 'be32a5dad7ef01d3216732ce73ac3875eea6ad454136b2abbbbedb1b3e3daad8'
'rsds_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsds/rsds_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' 'de483577510fc217d35f674abf622a250a54380d5e11a514049541a9248de2de'
'rsdscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsdscs/rsdscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '12eedfdc3431e0811dba639f3c08056bbbf149ab67327388950017873612ec44'
'rsdscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsdscs/rsdscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '40b13aa98cdff6c866d129694117200e6af3d5a83e9f53edaa015aec18e7a277'
'rsdscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsdscs/rsdscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '11af2008abf41bfcaf5d33ff0947175c041ffd7f831b9d7ffb2034fafb9972c1'
'rsdscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsdscs/rsdscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' 'd0d0997f264b6504228dc2d7a663e83ba216e05bffa7af24795c8a55f7594795'
'rsdscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsdscs/rsdscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '0cf65dcc35b91decd6a60b722e0dfa5bf3d1df18eef325077b501e8327eb8c07'
'rsdscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsdscs/rsdscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '1ce2b64b89e074c7e5ac2db155526b0e6b981d3dd9a699343289e7e52e7549d5'
'rsdt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsdt/rsdt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '15c77634c444208410b6b932c36953e41a42b4748591d18ea2d827c387ad3ab2'
'rsdt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsdt/rsdt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' 'b39735c69d5bcbd98593bd56fa20c2794708fbc7fd1f720dc8ddd772cf7db85d'
'rsdt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsdt/rsdt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '399ad16d9e529c1bcbf40bf33f723cbbef9308b83072046b981ee9ae674dc8b8'
'rsdt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsdt/rsdt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' 'db77a0bca0d1c807a9b3828e216c04197e3cb8f2087806518cc0b26bc5da6e99'
'rsdt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsdt/rsdt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' 'c349b0dab27f067a99ed6600d283b0d1d590b5f0a8e308d408ac5e30304c516a'
'rsdt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsdt/rsdt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' 'f00db528bea4618b5ac09bd54a801aeffd3a8317d367a58b6b453018e3bc4e02'
'rsus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsus/rsus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '4cebd06c13a8f23a817cb91244c8ba2fabd87412b144cef507b4d9de21f91227'
'rsus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsus/rsus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '2135645ee137589950344dbbcc5af67360ad1f5ca68a51baa8af0136448048ac'
'rsus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsus/rsus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' 'd312e9e3a39578845dd94758041dd474ffeaf26f733a6024d9b7a359d6828ec9'
'rsus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsus/rsus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' 'bd82670a0e4aada4fff4f059785e25994e0df1f7602ad6c000d4244b5b981205'
'rsus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsus/rsus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '80fcb2ea41e6ad613084c9250b3a12c1fb5dd69d9deceeb12788bdff01dc3d8f'
'rsus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsus/rsus_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' 'bd3802e438606aa7a1185d5c3ba4d95beefa1f43dc7c3f236e6aa22f29fefaac'
'rsuscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsuscs/rsuscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '0bc13eb5e67097412e8d92bcce6deefd75aba83fae5c5a14ed259320f20640b7'
'rsuscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsuscs/rsuscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '866657367b258232957840e1b32b958264e172f1da41b5a590cb4b6537a21462'
'rsuscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsuscs/rsuscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '2d346b0e5f227dddb980f4df84c4d4d86700c32eff007bc47958eaebc9f6344b'
'rsuscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsuscs/rsuscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' '52d7afcc6769df4f986fc2259915220768d7beb4932cfa96f2fdf67e0283b1bf'
'rsuscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsuscs/rsuscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '171a4acb3723e24ee6e60a703b977553945a7209bef68d04efdcf284aa6bd5a8'
'rsuscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsuscs/rsuscs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' 'fb65a9b370f0c11791d240cb10fda2753ffa9223471137fdffbc94f0e53b8614'
'rsut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsut/rsut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '8a03fcad9b8f1594b5ba5ed48206e5c5a440243de855e9c4ecb12f378a58e5f3'
'rsut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsut/rsut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '8c95917e9b580a4ecee52961893e06f0f058f33ab0f239e59cd905c94142f5b6'
'rsut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsut/rsut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '63bb3cb219f4bf99a8e75a27367ca2d068d03302f976ac6a5f4e35f2bce268c0'
'rsut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsut/rsut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' '1e1bf03b995690cbe0b4db4e350e500ba0d3c385292a0c2ac6766d3b2a5ca5de'
'rsut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsut/rsut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '8f6205f8616956bbaf088e94d6ab7c225586014bc77e105ce2ebf9ef6b940a17'
'rsut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsut/rsut_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '5a8f68edeb74fea4aeb9d933ca232776157b5aca5cc233eeafbed5c1200fe56d'
'rsutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsutcs/rsutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '2883fedcb83bce1ea3a0e68dac73eb7c1bd9d1a472278cfa9bfef715adff758e'
'rsutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsutcs/rsutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '1a6ac874845203f1c8bbfd9c5a88fc1b225f22828d93a629db09af572eb698ae'
'rsutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsutcs/rsutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '328402e348ceeac78d1b7077d524ecf8f8186dd7b4d17d3ecdb870a89e736131'
'rsutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsutcs/rsutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' '6ba9dd73f6aeff14a9a98ee3deeb6dc97d467446520a02df90626d1c8b9a2c3e'
'rsutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsutcs/rsutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '3b713c6140fbb7b5a393fe85ff4da871eafb3f28cb479f4fbfa8c3a4e9714a03'
'rsutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rsutcs/rsutcs_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' 'cc739b7981db9690b0f48eafc8e310cf7eafad8dbd250efde067242d0587ab50'
'rtmt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rtmt/rtmt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '6cc32ba73dfb8304111f3aa7c6f1ae6277d77f33df5b46d4ca4324dd789de22c'
'rtmt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rtmt/rtmt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '7c1eb7ec959b26012e7af0b410391a9af5243bc2d7d2ac8c8137e09ecff52d07'
'rtmt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rtmt/rtmt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '9112da74bbcabdc47fa737c0d3fb50192170c68de2e6083272cd2841eda1e4ff'
'rtmt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rtmt/rtmt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' '0771b0a933ea61b1ad11fc463f0d2bb2bf2d88866bf90586f952cbb81d4955fc'
'rtmt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rtmt/rtmt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '710573a4c5f4dfb9df6d717f2dc99bf19d1c47cadef879ab9954d097123e5f7c'
'rtmt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/rtmt/rtmt_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '139cd9c6b529ed36d3f652f82b1bcdaaf51347c4b9e6a7233e5645c2ce8b3692'
'sfcWind_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/sfcWind/sfcWind_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' 'ea020da703491ae276cb88b9f37a0e60499c8eeb54280e6f27f653e65e3d93b5'
'sfcWind_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/sfcWind/sfcWind_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '933cad11e7c0c786994069fbf3fee981c2479a1d1952bdc0ce16036ba4ca0ccb'
'sfcWind_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/sfcWind/sfcWind_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' 'b9815fa28879c3207e5a2126833b563d8e11227af6288cb90e1137ebce57da12'
'sfcWind_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/sfcWind/sfcWind_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' '411b37a27c5350c3caf12527a47d3d112119afb9e08fb39c4a68f76d6cef7940'
'sfcWind_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/sfcWind/sfcWind_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '27969cc0b5f71e92021c571d781372cfe0ce85bc1a7d6014aaab90702b4881dc'
'sfcWind_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/sfcWind/sfcWind_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' 'fc517c7aee214016731d833a8524edcd8656dcc44c4604ec933847813a1f6016'
'tauu_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tauu/tauu_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '1d6d87e4cdf20826587e8e8162a7f72cc4d23befbc004cd5d51633fbd41e864b'
'tauu_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tauu/tauu_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '7b88824851cd6f642ff7f5f7901db1f81401cb7aeed7f1287ce00724f301b779'
'tauu_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tauu/tauu_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '1abb59552f10aebde3e7a521f21043184b0ce90c523a2cccdb5050547e1a5c48'
'tauu_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tauu/tauu_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' 'e8d63f8a7d416af57323752edd5ea6aa0ffdf87af67e30a1ea655fe9cab71916'
'tauu_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tauu/tauu_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '76dcf50ff00fc051ed8a078d585e52124dc80a566336cedbbc7ec18b9400380e'
'tauu_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tauu/tauu_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '8dd5ef265121cbd98cd494218dc8945144b457103ae8b33b9389d8322a44a0e0'
'tauv_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tauv/tauv_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' 'ca1733e7a12ffa36297a0d3d27008bdf1a12ed7eab457123e12ce415e8806739'
'tauv_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tauv/tauv_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' 'de3cd86a73f7662134b7e2ae0bcb11966a4ba280c5de716684ca0d17e4546a99'
'tauv_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tauv/tauv_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' '31b9826f5cf3cd6e9cbb1b1ce33956bc0def1a394e9546e89d325e49022abdf4'
'tauv_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tauv/tauv_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' '9a3948df4e97088e474e760216e769b8839427d5ad324b99bc9c5ea5a182ba69'
'tauv_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tauv/tauv_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '6de69bb662aa4126a3134a8476abed990d24fff6d62a3e7809f2374b7a7aeaf2'
'tauv_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tauv/tauv_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '27447e9f90a036e3d71c3e45821d5a9a8f0e54d5cb2e26c634327d82441e20a8'
'tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tro3/tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' 'c030f997262308d7dd4c28f609bcb94f7b3f2d85400c27f5373472959b3fdcd0'
'tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tro3/tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' 'f0c43a737e6d5742501a90e10f5fe96263fcd2c672672faa10cf2fb998eac0b0'
'tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tro3/tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' 'c5238004c798aadf5b5a4c72b3f2d8d8548dc64e1fbfcd588eefbd799ff3d0d5'
'tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tro3/tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' '68179b2014bf6c4c506eefbb3ebb3414a7989a14b44cbd1528106ff49254e6a8'
'tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tro3/tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' '5413ffbbbc51111ae86553dda03e155ce0dce95e58e611072eaf5d534aaee79f'
'tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tro3/tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' 'f5890269ed0282aa51197c207904288b887eea1a14d52d7f125415a534d15f88'
'tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tro3/tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' 'c59049fb458bbbabcd1ece1d2311bd372e68af1b7795f384e8456d5ee2576baa'
'tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tro3/tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' '9bd05e4047c8ec2718c6427b4dfcadc6907a86973294126d90b02f9c3b3d3159'
'tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tro3/tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' '9d8176783a0e2ac84e607e097bb97046ecae46997fe5bab5af075e98abfdf3a6'
'tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tro3/tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' 'ca36ba8d5b0dcf1bb89f5ce30195da1db7551727d73bb32cd296bf9cd9f10362'
'tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/tro3/tro3_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '5ee92179c4a5da0e13a7152dd319df1ae9c690f11d6dc83802fff5a06cea496e'
'ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ua/ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' 'b47624316dbb4d8ebd62806f28cc45b5a020710a8493393c4ac6bda36031337e'
'ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ua/ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' 'ff951bc2aca21b17c0fc07e86b76b52493cfb486aed21f6ab60116374562c627'
'ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ua/ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' 'f53ae951db12d3608a8f48d9c267981efe5761b7ec50ea4540cfaf437ef5c545'
'ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ua/ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' 'd9aeb23aec39242f8612599847980577ab8cd2ce0e27dc226c75b2a0a710987c'
'ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ua/ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' 'cf3e12ad419cb1a719998cd491ffa3742c80f74354bfa5341bdfce4a8a423454'
'ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ua/ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' '5943b225bce962a926ffd9bff3b38fab2d775cda8b1470c2d5e8b622f72da18c'
'ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ua/ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' '7aa65b4d9fa9e9560680995c9880f9d104be111aae4d1564fb89b3b756acef06'
'ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ua/ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' '4d93b23077e9c0f60c9e2e3359871df4e8b6ba940f8be602d614d675de419efd'
'ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ua/ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' '08259f3659355217ac2a9cec888ab0439740c83b62ee2615d024dbde0cfc6511'
'ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ua/ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' 'f70b646d99d61347c0101d3b4d6e4a179df0990a24a9eb395785769dac40feaa'
'ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/ua/ua_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '8d9223a8a60dfb6b9ce1a3ad0371a0ca40d062117358dea221338b871bd5813f'
'uas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/uas/uas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' 'e8b7b7c09b673bb9a8896ee2c257f51d70dc2029754d293212f71abb638f24d7'
'uas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/uas/uas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' 'f283eb9d54945e6866342b655f41cffe18c98c3170b8c1a322802d26db2cfd98'
'uas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/uas/uas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' 'a58d071639e60af96344c9a3975333f73d17b110602757db5b6bb058301b74cf'
'uas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/uas/uas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' '326152b4d978125f5994644855bb0ee5215087f729682a03056a79787bf9301a'
'uas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/uas/uas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' '197dad1bbed83b7920eb075aa76a545755316862b10b9352333a5413b50680fd'
'uas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/uas/uas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '3041b9e67fb4193c04fafe288fcaa6626ae732882066c7194fbcb2254ff43cb7'
'va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/va/va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' '04f4b5d1f456029acb5e62bbbd7724f926ec48170c389fbdafb4c9531db77526'
'va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/va/va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' '63e68c04e733bc92f2ade1469e3c189cb501369d9d2d296aa4f06b77245071ec'
'va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/va/va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' '5cbe7cdb86fa2332b434487386267b85d3609eddf001446193237de3986ec5b5'
'va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/va/va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' 'd66907fd683552b608fb191e6dc13419599e381cb9b2537ba70f057ed92ddf08'
'va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/va/va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' '61b37eb69f311b7b400ad4a54713aa693b34dd4204fdfca882258250beafa274'
'va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/va/va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' '73f1cb0d331ccc92f29bb05a7fb53ecdf98a85758833e54f38993c1aaee8bb6a'
'va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/va/va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' '9452d62b1ed325c273612dd0ca5e3bf2877661ac68f9d234b7ee4f05a9a1dfcf'
'va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/va/va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' '6484b986cced4df8d31ecc3050158ae1354a5609c1fa8c3b78e25e81f08cd35d'
'va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/va/va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' 'b88e76faf65054c3cd2993d075d2c3abf1866622d4a097eddb03b8abfd5b6c06'
'va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/va/va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' '5868469ed29ee16d181004900c1d144617a1bde41b44c60e75e61375e1427b52'
'va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/va/va_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '71db7324da7f6b8466c40889cd0b01229642a73acf5bac460dd1caeacbcd0765'
'vas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/vas/vas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-104912.nc' 'SHA256' '7236fbc80037f728bd39866937fdcf974f9abbc74fddff6f9cc7085f7f07749e'
'vas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/vas/vas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-124912.nc' 'SHA256' '2ffa906b048f34aa6ed417080a9c682e5b628da750610cb24d04e5253ab8db22'
'vas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/vas/vas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-144912.nc' 'SHA256' 'fe3ef9297f94badeee1341cb411901333d75e5d65a11e0cfdabe63cd37630461'
'vas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/vas/vas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-164912.nc' 'SHA256' '931f7aa17b418b924bbf312de73caf93e7b61d4d1e3e99de0c83e517db255a8c'
'vas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/vas/vas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-184912.nc' 'SHA256' 'be882277030083d323544076bfacada58a76b27a460ba051ce36dbda0e385eb6'
'vas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/vas/vas_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '36f32538cc6f3c556e2562fe2e01685a6ed7e7364fad8d601d28a060a4d5a68c'
'wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/wap/wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' 'f255d125bead11a7f5e87fb6dd225a58edb38e3735b3cbc2a85bb06522541453'
'wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/wap/wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' '7e5f04149b74d173ac6e9a2363531caf154a8aba0b2c2445f119517153028bb7'
'wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/wap/wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' 'a7aa9a834c4129f4fb3cd8f3ef669c655cac0abaa17d1ea49228e41096c973f2'
'wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/wap/wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' 'd9de9b459ebbc20daa7836b24d56494d0733a779e70be5a24dfb8fe22d3b8073'
'wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/wap/wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' '8e6b52be249147ec801062f2269a83f7be959ab21597518f26ebacf56c76ea0e'
'wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/wap/wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' 'c71c95a170d43c1117bea0f913ac3e4f95ab15c21e9a79f4b95d26ac9a53209a'
'wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/wap/wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' '178ee3e7204b2244a7df9d9d5cf30f1af31cb79fe41e16bb3e00c109699f5547'
'wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/wap/wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' 'b4b91b14cc404f393c1f5d45fd3ad08859ca6371b867b6cbbb35395022b696d7'
'wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/wap/wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' '2830ecfe8a361d0e1e05220386c92d15d8b684981d15e164e97802c9514a3bb9'
'wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/wap/wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' '960cc11a615ba603244a8566642d1e5f33bdce093f6cfae2229c2bb216cfd768'
'wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/wap/wap_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' 'd82ec4bcdee0c8c0decfd8a0585107f005072d1ccac63bf2903d41cf96d59d5f'
'zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/zg/zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_085001-094912.nc' 'SHA256' 'dcbcf16d15de99afae7bb2acd44b2541b38fee445b49172f2054f9bfec559dba'
'zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/zg/zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_095001-104912.nc' 'SHA256' '0fb950953758aa7be2ad0463b64aca8247936b0981a22feb4e671ff288db6e6e'
'zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/zg/zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_105001-114912.nc' 'SHA256' 'e51ac5cfab8af515bbbfd094d077da687ae3565f5a9d641dfc7afdf48f269d43'
'zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/zg/zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_115001-124912.nc' 'SHA256' '009fb966ea3f33b3ec2fba3e827a27fcf0bd8b1ea7a9e9e0dc4564fecf5400bb'
'zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/zg/zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_125001-134912.nc' 'SHA256' '36868ab59e82ceca3f8cf90ea58810a9e336049407bba887d2e03b640aa528fd'
'zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/zg/zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_135001-144912.nc' 'SHA256' 'd8bccfa3972e0d042168b884420f4c74893751d28ac648df5a1ee0dc6c7bac64'
'zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/zg/zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_145001-154912.nc' 'SHA256' '4502722e7633106ec3abd06fb0e32e3a76d5ff325bf2435259adadc616b95669'
'zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/zg/zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_155001-164912.nc' 'SHA256' '72e6b93945f6dbe4013c737984ed2c8c637d88a5cb8d1b1bd7bc0244064ae61f'
'zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/zg/zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_165001-174912.nc' 'SHA256' '340f0d141c9d801dc590a2b3644994f1f1d5e5959e77be47133464314e669a64'
'zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/zg/zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_175001-184912.nc' 'SHA256' '505616e1a559a64444fd60dd6ca4cf5a8dfa71e41b8a56e740770e7c14b2184f'
'zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/mon/atmos/Amon/r1i1p1/v20120804/zg/zg_Amon_IPSL-CM5A-LR_past1000_r1i1p1_185001-185012.nc' 'SHA256' '5b4835bb33ddc61c25f721abc1feef6ecc6439089cb15bd0d8b4ef9e0bf2a9bb'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 366 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
