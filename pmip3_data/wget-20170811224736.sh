#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-node.ipsl.upmc.fr - 2017/08/11 22:47:36
# Search URL: https://esgf-node.ipsl.upmc.fr/esg-search/wget/?distrib=false&dataset_id=cmip5.output1.IPSL.IPSL-CM5A-LR.past1000.day.atmos.cfDay.r1i1p1.v20120804|vesg.ipsl.upmc.fr
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-node.ipsl.upmc.fr/esg-search/wget/?distrib=false&dataset_id=cmip5.output1.IPSL.IPSL-CM5A-LR.past1000.day.atmos.cfDay.r1i1p1.v20120804|vesg.ipsl.upmc.fr'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18500101-18501230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfss/hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18500101-18501230.nc' 'SHA256' '9ea3f5dd4f3a71e6109e334fb7b80e098b4be2f46a34e0b846a1ef0c868ddaec'
'hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_14000101-14491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfls/hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_14000101-14491230.nc' 'SHA256' '821bf32e339d7e1e22664314127e803671ec104d6fafed8b0dc29d97eb80642f'
'hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13500101-13991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfls/hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13500101-13991230.nc' 'SHA256' 'f7856060b8322ecf845c7ab96e086d237a9734203d1064f74b416887aeafb7e0'
'hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_10500101-10991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfls/hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_10500101-10991230.nc' 'SHA256' 'b907285319d8bdd1932ee7c6254eb23042aac75d65f6471a1e5055dc0df154ad'
'hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13000101-13491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfls/hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13000101-13491230.nc' 'SHA256' '51acf82b7e2ef3a7da1e595479abb3212a135b9c9509f678c5fd0bc1a9128fc9'
'hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12000101-12491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfls/hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12000101-12491230.nc' 'SHA256' 'c85f1ad5af6c1402319e0b525fd0d7349b3b8e785646a898f4751e12db06a7b0'
'hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11500101-11991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfls/hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11500101-11991230.nc' 'SHA256' 'd1759e835c634ce302d2e075cdc57628fe2f852e4df976ed45c5a3b07234ce03'
'hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11000101-11491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfls/hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11000101-11491230.nc' 'SHA256' '3f15aff345e645bdd0d3d1e719f2bd8763aa876634561a60db0adc7b74121f3f'
'hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12500101-12991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfls/hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12500101-12991230.nc' 'SHA256' 'eb22910bab59ad245fe2131a3cd28b7c6a631d4da7ae474b85a586f1e1f934f0'
'ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12500101-12991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/ps/ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12500101-12991230.nc' 'SHA256' '685cc985df98a2be9d7cec0a63a698da642870b2483dce2587175e92ed592b7f'
'ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11500101-11991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/ps/ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11500101-11991230.nc' 'SHA256' '8410317fcbe9044c13278cde5797397ff71012703be479182e04b1987526ce95'
'ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16000101-16491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/ps/ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16000101-16491230.nc' 'SHA256' '0e2efe653f0df9db681a613063705295a6ff7c71cee7180281011f73727be911'
'ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_14000101-14491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/ps/ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_14000101-14491230.nc' 'SHA256' '75e33ca006994b0439298463e0a5890320c72e51238bce597cd45cffc18b1c6b'
'ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12000101-12491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/ps/ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12000101-12491230.nc' 'SHA256' 'b95919a122c5f2eefe94736a765c91535bb592987ff28648c193f12e98823107'
'ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15000101-15491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/ps/ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15000101-15491230.nc' 'SHA256' 'b03656ad2e4928704123d512807ab0fd9b0ac353becbbdc7855c65f97270890d'
'ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13000101-13491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/ps/ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13000101-13491230.nc' 'SHA256' '2413b5f900137572c119cfea8566f21faa0bc7ca05b8daaaf960638dbffa9f81'
'ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13500101-13991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/ps/ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13500101-13991230.nc' 'SHA256' '43e37e4d5e099faecd96ff9fab8fffdb7ab96a6b1cc5748d02b56f4c730b1426'
'ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15500101-15991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/ps/ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15500101-15991230.nc' 'SHA256' '9d0759f5765160baf7626767e1a98ad7720e776ce0c7269c1a3bbf6cc40bc5a3'
'rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16000101-16491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rlut/rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16000101-16491230.nc' 'SHA256' '0ba0cb9cce7794b295d69b6e414cf3ea89b9d3be74eb58e2f59fed64f397d8d4'
'rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18000101-18491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rlut/rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18000101-18491230.nc' 'SHA256' 'a93e3fac120ea80a5670e6b1806b20af13e95cfc412f62dc47f43d444af2dbe2'
'rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17500101-17991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rlut/rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17500101-17991230.nc' 'SHA256' '45fefe14d13e82f5295bb4e41da7f33facd46411db9c1a4d61bc063c5ec594b0'
'rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17000101-17491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rlut/rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17000101-17491230.nc' 'SHA256' '4f0e7de7e85337fcb3fbb8a82124f4bf742278e5232da5ff3d6ed7c8a72d0d77'
'rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16500101-16991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rlut/rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16500101-16991230.nc' 'SHA256' 'ead7976730ab1f4b2b04fb55d00c137e36c662c9a2313b5f619f277eb1aefb32'
'rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15500101-15991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rlut/rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15500101-15991230.nc' 'SHA256' 'a0bc6c4615cbb70885d3e684c644488722593ce39d21027a014f660330f62828'
'rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18500101-18501230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rlut/rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18500101-18501230.nc' 'SHA256' '5e345eed4fbf9cc435a46a37de10792003491550df07097632384044aae7dcdb'
'ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_10500101-10991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/ps/ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_10500101-10991230.nc' 'SHA256' 'a7fc592c1de41faa8539c61fb0179247c5ed768ae7c005470cab028c1df27e08'
'ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11000101-11491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/ps/ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11000101-11491230.nc' 'SHA256' 'ef62773c0253085c267410b6eec7a1ee77111e3c3c7dab437c71daec8d57e2ac'
'clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13500101-13991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/clt/clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13500101-13991230.nc' 'SHA256' '969de1219c366b3ff7a56a5f27a142c588425f17e06bafd3207290e7504366e5'
'clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12000101-12491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/clt/clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12000101-12491230.nc' 'SHA256' '446f66d1958e3baaddd26989e48dd840faf1cf9fc6e60ffe6f79d1986811a77b'
'clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15500101-15991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/clt/clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15500101-15991230.nc' 'SHA256' '6ebe17130f5b3f160c7153ddc7a0eb0b4d13dc8cd0a16cdff3c717bf52070307'
'clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15000101-15491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/clt/clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15000101-15491230.nc' 'SHA256' '4767295597d3a1b254a362fa9ef8bb8fb0ec9f69e0fc210d4387ac5a4c0701bf'
'clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_14000101-14491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/clt/clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_14000101-14491230.nc' 'SHA256' '9a5b0ded650fa023cbc5f22d6b54a42b7733b40b7817c1c117319cc105269669'
'clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13000101-13491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/clt/clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13000101-13491230.nc' 'SHA256' 'afa369f7f1cf6fcf15c2ac2a4a235582cc1d398bf2e578c0b2055a7a39ec5fba'
'clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12500101-12991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/clt/clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12500101-12991230.nc' 'SHA256' 'e7d432bd8a97ff85386db4253d60d2a48e04ddcd82c3336cba2fc3f402712465'
'clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11500101-11991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/clt/clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11500101-11991230.nc' 'SHA256' 'ba784a3e74db4cca05103793c9dea11bb450cc9c9001da1b6628f7145f3f3a67'
'clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11000101-11491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/clt/clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11000101-11491230.nc' 'SHA256' '7d723a02231492526662197b7fd2724fe2a260e71c0e50b81809460e7f79fe30'
'rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_14000101-14491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rlut/rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_14000101-14491230.nc' 'SHA256' '37a7efceed33ebb7c8fd6baa881571c35ab4d0deff0d85ed816d47e42711c026'
'rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13500101-13991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rlut/rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13500101-13991230.nc' 'SHA256' '2796bb33f71f91414cb0489804b0f5324ea63dec4b5d33710ab46187ed68dfdc'
'rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13000101-13491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rlut/rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13000101-13491230.nc' 'SHA256' '84a9c18e036f4ba64bd0b5d59a385b071e4c6b668fbab31a22a16ce4ffcbe018'
'rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12500101-12991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rlut/rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12500101-12991230.nc' 'SHA256' 'f0daad249e0f25fb90bde9c243630a6af8fd7481a9ce88c2caae6d26a92038f9'
'rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11500101-11991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rlut/rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11500101-11991230.nc' 'SHA256' '3e842a0726107c35ae4d80dbaa1dde3bd084799427d7fb5a493ae334884df301'
'rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_10500101-10991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rlut/rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_10500101-10991230.nc' 'SHA256' 'e6f9b469526decb9a84c5107090fe2c6c83c8cfecfe943b8744dc1e7cee1f711'
'rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12000101-12491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rlut/rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12000101-12491230.nc' 'SHA256' '1413b3d34777c7ebb35a4902a1ce305185137d69cc66dd7a9293c487c49d7be4'
'rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15000101-15491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rlut/rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15000101-15491230.nc' 'SHA256' '2cbd30aa172ef525ae61fd302e4c53f8f5e2909ef457548ee173a77d9f3a08c7'
'rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11000101-11491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rlut/rlut_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11000101-11491230.nc' 'SHA256' 'cd6ec9470c85348f1f3d86ccb9a6842f7df5b0dbf2d0a18f3c88ecbb7b018504'
'clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18000101-18491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/clt/clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18000101-18491230.nc' 'SHA256' '8ef64941c8df482774f9cc4f0669f0b176791ef67eef45aadba51c5ae1018d59'
'clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17500101-17991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/clt/clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17500101-17991230.nc' 'SHA256' '803e0a4da245a907ff7ae1f9f3b405f7b8e59410e1dcb8f5d8ce7bd6cd240399'
'clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17000101-17491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/clt/clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17000101-17491230.nc' 'SHA256' '53e9780fdfee29d3d322c7ed5d9762960d479ad43e59117405c17fb1a93a2240'
'clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16500101-16991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/clt/clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16500101-16991230.nc' 'SHA256' '97d87a6316e414962be0aa9707cc28b588257ae5deb7746208d1a1c4a9e80573'
'clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16000101-16491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/clt/clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16000101-16491230.nc' 'SHA256' 'e7ed878b119aea831f42d9b2d9a860eb61e4893db79dd4027ac81cef206f9432'
'clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18500101-18501230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/clt/clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18500101-18501230.nc' 'SHA256' 'fc22e59f954a0f89b1b1c8d1e9b7435e4214d0787cfda43c155ef090856626e6'
'hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12000101-12491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfss/hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12000101-12491230.nc' 'SHA256' '9d8e3214e3da9cf4b3a5c1ce075a015aba85a7587abec64888714bba79f644b5'
'hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_10500101-10991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfss/hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_10500101-10991230.nc' 'SHA256' 'd690041bd315f2922740d1e150d957aff0934daf5d6e4b0fb531c01f140c161e'
'hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12500101-12991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfss/hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12500101-12991230.nc' 'SHA256' 'f7f5282fa43ea40c8caf3e592899faa326c06e513c3354fd6b2daf00f78ba887'
'hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11500101-11991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfss/hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11500101-11991230.nc' 'SHA256' '135e2e59342d8fb861c14ab68cd0c01a9cd113a0a72f38b012cff940bb92a373'
'hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11000101-11491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfss/hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11000101-11491230.nc' 'SHA256' '8ccfbc7534529b9d14bfabf96665d6b582bbec3def03700bc821aee10a107554'
'hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13000101-13491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfss/hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13000101-13491230.nc' 'SHA256' 'd45e501fe0f9a3eb50ef44ec34230ee20d08dac3cbc6fa1f382837592e7938a3'
'prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17500101-17991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/prc/prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17500101-17991230.nc' 'SHA256' 'f51f1d245ceb7c67f9eedea2854c95f4c98c0dd83ef0c6c359dd67f4b1976c35'
'prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18000101-18491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/prc/prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18000101-18491230.nc' 'SHA256' 'b00679faa097fb64f84ec156206cab5f81ba1f7153daa083454a21ae426ed88e'
'prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18500101-18501230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/prc/prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18500101-18501230.nc' 'SHA256' '4b7fea14c32e967b10982c9bb32e16827f77b1c7d41c176efeac3efc3e32b80a'
'prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15500101-15991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/prc/prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15500101-15991230.nc' 'SHA256' 'd302956ca2494839aaa8aa4e0d3f390735b30ec083962dc18158573716bf550f'
'prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15000101-15491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/prc/prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15000101-15491230.nc' 'SHA256' '95a59efa989a3d5611cd17a2c732362c965cce54375ec0a245e1e0fde87e4e4e'
'prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_14000101-14491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/prc/prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_14000101-14491230.nc' 'SHA256' '6aa4400ae523e110f02a98657c73309f94332e4abe79d5689de7942f40893fe0'
'prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16500101-16991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/prc/prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16500101-16991230.nc' 'SHA256' '98b78adca4bdc8840ac1572af484e5ea5dcccaf7661359e754aa7f89a241e6ed'
'prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16000101-16491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/prc/prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16000101-16491230.nc' 'SHA256' '762c83693a82ae46ea3433d60b79d7d304c02b82851cab937eb274c7317b769a'
'prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13000101-13491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/prc/prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13000101-13491230.nc' 'SHA256' 'b0c2df8f15ff4fd0aacda1c98b9161459a38cc086ac99e8e6ef3fc180a6156a6'
'prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12500101-12991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/prc/prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12500101-12991230.nc' 'SHA256' '6399dcff8fa2fa81a6368715fa4483bb2d8ccf43378fa4637cf12b4ed3b54854'
'prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13500101-13991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/prc/prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13500101-13991230.nc' 'SHA256' '4352c23020481b5312ca7c956fcf7e7ea585a21607ecdaa2f5535d9a0df020d8'
'prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17000101-17491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/prc/prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17000101-17491230.nc' 'SHA256' 'b2835c6360b507f05af365e63a905e0cc6a6e6e1b85053a722bcca2ec4333ff3'
'hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18500101-18501230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfls/hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18500101-18501230.nc' 'SHA256' '00face1a74d257a69388562473527baf86b743575558b0358491062cf047622a'
'hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18000101-18491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfls/hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18000101-18491230.nc' 'SHA256' '6e84defe0b156d9395aaef834c5db245cf68be3cac6952b79746c5176b5a30f5'
'hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17500101-17991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfls/hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17500101-17991230.nc' 'SHA256' '99a7a6cf3f4b79a9cf1fc1ca3a1cfff95dbd1c89cbe7eb0fa89bcf183d0ac90e'
'hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17000101-17491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfls/hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17000101-17491230.nc' 'SHA256' '3fff6410d0db2557b7c3f1461a7303ab18a2458f7cc916c24ab4690b0d6798af'
'hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16500101-16991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfls/hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16500101-16991230.nc' 'SHA256' '4282ee3fae9de62e80f86a3733aff592db511c641b036f609d50e545291ab9bc'
'hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16000101-16491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfls/hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16000101-16491230.nc' 'SHA256' '468ede866e21ae8e9a4575071edc0ce77b31212388ee8a491cb495b54df4ee94'
'hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15500101-15991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfls/hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15500101-15991230.nc' 'SHA256' '41990a0148aabe147b7d770b698eb13d79463e951a9bb425732ca67feceb68e9'
'hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15000101-15491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfls/hfls_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15000101-15491230.nc' 'SHA256' 'fb0078be177909faae86c5e7a700c6794c484474aefc6d5a8dbf0411a3836e90'
'clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_10500101-10991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/clt/clt_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_10500101-10991230.nc' 'SHA256' '2fba4ab80885008c6ecd54bf0c0c0c526e670f1d9386c9b97ead03a63d80bf66'
'rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16000101-16491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rsds/rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16000101-16491230.nc' 'SHA256' '04ad89eb2afe6814f4632ce4bddbb066abccc3165e41c96198c632c3f32e0001'
'rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15000101-15491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rsds/rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15000101-15491230.nc' 'SHA256' '6d3beadfdde9b5b0c253d3017ded1ee934d9d91d0784b8a86729ee0702dfb52f'
'rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18000101-18491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rsds/rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18000101-18491230.nc' 'SHA256' '90b1a6d8c00d2796465d201b2ba7502c8d637cf75722cdca8d87c66ba49ce3ac'
'rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17500101-17991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rsds/rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17500101-17991230.nc' 'SHA256' 'ad02de7574ea7a335a9397a239f4a53ea81adde029469991da4dacecef2aeda5'
'rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17000101-17491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rsds/rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17000101-17491230.nc' 'SHA256' '3e2b26277ce661c6cf5ceb95df6bd36da75d1e1621ec3e4572f3e49eced8dc12'
'rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16500101-16991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rsds/rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16500101-16991230.nc' 'SHA256' '7178c7e0f914b515686bfe3d64e5f17158f3c9c94f1bf2f37e0ab2f22147bc67'
'rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15500101-15991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rsds/rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15500101-15991230.nc' 'SHA256' 'c6f15cabd3e141bb57a17ebb8999384fa3a03786b68c8fa373088d5ef1cea4e3'
'rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_14000101-14491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rsds/rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_14000101-14491230.nc' 'SHA256' '6b1a063da881f6cf4a67be7c4cde3b0ce8806054886755ea81c11b88bb0cc720'
'rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18500101-18501230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rsds/rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18500101-18501230.nc' 'SHA256' 'ed45b2eacec1f371d7e81a556af3ae331890454636f5a3839df4f7efccf12656'
'prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11500101-11991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/prc/prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11500101-11991230.nc' 'SHA256' '6a1c7a5e8142eac4857a3db7296ce21754436c6ba167d9e6485252a921e3568b'
'prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_10500101-10991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/prc/prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_10500101-10991230.nc' 'SHA256' '78874e0348bfe38524fd44bd442cb4ef7ed7f3de222147d99bfd28ca63fab2f2'
'prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12000101-12491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/prc/prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12000101-12491230.nc' 'SHA256' '6fc889b31f19b5cda8f67114ea84b7cafa9a74d7961968f7f094fd864e4b8dd1'
'prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11000101-11491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/prc/prc_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11000101-11491230.nc' 'SHA256' '3bae6e71013b7e3319a332f50329cc671a3cbe5615709ebc1f61ce8622bda264'
'ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17000101-17491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/ps/ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17000101-17491230.nc' 'SHA256' 'f309854dbdb8197ccbb34dd190a072da77648e45ec23c06f6b46d96135aca050'
'ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18000101-18491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/ps/ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18000101-18491230.nc' 'SHA256' '797b42387943d24a56fd5b6d07f0e028d9c330c63603935657de5bdc721f799c'
'ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17500101-17991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/ps/ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17500101-17991230.nc' 'SHA256' 'fafb91989e11f202e0421d3e058a5eceec3a6a155c007f1b86b214565ea3a678'
'ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16500101-16991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/ps/ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16500101-16991230.nc' 'SHA256' '28798bcb406682fb9e9f3c254080ed047300c742627766c99d603fb0ab9114a6'
'ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18500101-18501230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/ps/ps_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18500101-18501230.nc' 'SHA256' '1cc0ad7f553de7285f877d2f67383cb147b940448000beb03a3246e215fccaae'
'hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17500101-17991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfss/hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17500101-17991230.nc' 'SHA256' '569bbadcf404cd89d0f12fe80abc5e8d6dd571408779dfdcb2ddefa84b43aca1'
'hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17000101-17491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfss/hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_17000101-17491230.nc' 'SHA256' '574e5766c04f3ab972a55c3494ea17c92f53c7ef28fcbd038c9e73772594ff2b'
'hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13500101-13991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfss/hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13500101-13991230.nc' 'SHA256' '529085ad816718df7c9ccc6f4f22a097a2107d8c2df827e139e808d527a435b6'
'hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18000101-18491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfss/hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_18000101-18491230.nc' 'SHA256' '133107557bb88ad70826bb420077a3e210e303448f4d826e92cd5555f50905c6'
'hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16500101-16991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfss/hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16500101-16991230.nc' 'SHA256' 'ecac1ee8ef090f11cf050d6e111b061ca975c3c59102e653a7695cf3e135c7a8'
'hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16000101-16491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfss/hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_16000101-16491230.nc' 'SHA256' '5a07a50f48ad8676523649b55efb6769802df3fd574ae73c91edba21d93a2a56'
'hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15500101-15991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfss/hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15500101-15991230.nc' 'SHA256' '474dea3315f7ee622b6cedab34bf700be857283f7e5e3f3a9d2a1ff551e5dce6'
'hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15000101-15491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfss/hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_15000101-15491230.nc' 'SHA256' 'bd04e2bb5f5a6e851c199b8d503298878d565f694ff941237dbc4e93a17e6be1'
'hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_14000101-14491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/hfss/hfss_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_14000101-14491230.nc' 'SHA256' '25fa9b404a2592120d8beb577d41e2a061a70cdf3e902e59cd86941631bd9e25'
'rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12500101-12991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rsds/rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12500101-12991230.nc' 'SHA256' '00d2862a850d3cfb86a66d05a4632f3665279f0e19aeb6a259e15c0f7859b7a7'
'rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11500101-11991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rsds/rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11500101-11991230.nc' 'SHA256' 'e29d6295d8fb382dbe7d2476693388107544ca47ab1ad0f49c8cff06738fcb0d'
'rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13000101-13491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rsds/rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13000101-13491230.nc' 'SHA256' '64dadf8337c21ccdc4415af1f65a77d1747d44ca6e7ad5282c77627f2944bedd'
'rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13500101-13991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rsds/rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_13500101-13991230.nc' 'SHA256' '1ed3c0aefe15d5fcb3a086cb571e7b2b4dbe07ed0949e8f216e059cf81c695ab'
'rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12000101-12491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rsds/rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_12000101-12491230.nc' 'SHA256' '0b08cdd5046e6f613d3dbb4579976ee4df2a2e58786052dc5c8f4cf006c051a2'
'rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11000101-11491230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rsds/rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_11000101-11491230.nc' 'SHA256' '701ad3111801c580f47648e16feeb6c0de768ac6b2b255d25e70da18abbf832f'
'rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_10500101-10991230.nc' 'http://vesg.ipsl.upmc.fr/thredds/fileServer/cmip5/output1/IPSL/IPSL-CM5A-LR/past1000/day/atmos/cfDay/r1i1p1/v20120804/rsds/rsds_cfDay_IPSL-CM5A-LR_past1000_r1i1p1_10500101-10991230.nc' 'SHA256' '6509264f3ecbc0e2ce80815942d024ea9a2eb34aa5fd00f961eb565ed43ca223'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java is required for retrieving the certificate and couldn't be found."
        exit 1
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if ((mVer<5)); then
        echo "Java version 1.5+ is required for retrieving the certificate." >&2
        echo "Current version seems older: $(java -version | head -n1) " >&2  
        exit 1
    fi
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    check_java
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    
    #get password
    [[ ! "$pass" ]] && read -sp "MyProxy Password? " pass


    local args=
    [[ "$openId" ]] && args=$args" --oid $openId"
    [[ "$pass" ]] && args=$args" -P $pass"
    [[ "$username" ]] && args=$args" -l $username"
    
    echo -n $'\nRetrieving Credentials...' >&2
    if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
        echo "Certificate could not be retrieved"
        exit 1
    fi
    echo "done!" >&2
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 112 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
